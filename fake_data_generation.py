import os
import random
from datetime import datetime

from mimesis.builtins import RussiaSpecProvider
from mimesis.locales import Locale
from mimesis import Person, Gender, Address
from random import choice
from database import Database
from dotenv import load_dotenv


def make_person():
    genders = ["male", "female"]
    gender = Gender(choice(genders))
    person = Person(locale=Locale.RU)
    provider = RussiaSpecProvider()
    return {
        "–∏–º—è": person.name(gender=gender),
        "—Ñ–∞–º–∏–ª–∏—è": person.surname(gender=gender),
        "–æ—Ç—á–µ—Å—Ç–≤–æ": provider.patronymic(gender=gender),
        "–Ω–æ–º–µ—Ä_–¥–æ–∫—É–º–µ–Ω—Ç–∞": int(provider.series_and_number().replace(" ", "")),
    }


def add_years(start_date, years):
    try:
        return start_date.replace(year=start_date.year + years)
    except ValueError:
        # üëáÔ∏è preserve calendar day (if Feb 29th doesn't exist, set to 28th)
        return start_date.replace(year=start_date.year + years, day=28)


def make_passport(number):
    person = Person()
    birthdate = person.birthdate(max_year=2009)

    organizations = ["—É–º–≤–¥ —Ä–æ—Å—Å–∏–∏ –ø–æ —Ö–∞–±–∞—Ä–æ–≤—Å–∫–æ–º—É –∫—Ä–∞—é",
                     "–∫–∞–∫–∞—è-—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]

    passport = {
        "–Ω–æ–º–µ—Ä_–¥–æ–∫—É–º–µ–Ω—Ç–∞": number,
        "–¥–∞—Ç–∞_–≤—ã–¥–∞—á–∏": add_years(birthdate, 14),
        "–∫–µ–º_–≤—ã–¥–∞–Ω": choice(organizations),
        "–¥–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è": birthdate,
        "—Ñ–æ—Ç–æ_–Ω–∞–ª–æ–≥–æ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞": open("../placeholders/unknownPerson.jpg", "rb").read(),
    }

    return passport


def make_taxes_declaration(passport: int, inspection: int):
    address_gen = Address(locale=Locale.RU)
    address = address_gen.address().split()
    house = address[-1]
    street = address[1]

    return {
        "–≥–æ—Ä–æ–¥": address_gen.city(),
        "—É–ª–∏—Ü–∞": street,
        "–¥–æ–º": house,
        "—Ä–∞–π–æ–Ω_–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è": address_gen.state(),
        "–Ω–æ–º–µ—Ä_–¥–æ–∫—É–º–µ–Ω—Ç–∞": passport,
        "–Ω–æ–º–µ—Ä_–∏–Ω—Å–ø–µ–∫—Ü–∏–∏": inspection
    }


def add_person_with_passport(db: Database):
    person = make_person()
    passport = make_passport(person["–Ω–æ–º–µ—Ä_–¥–æ–∫—É–º–µ–Ω—Ç–∞"])

    db.insert_query("–¥–æ–∫—É–º–µ–Ω—Ç_—É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π_–ª–∏—á–Ω–æ—Å—Ç—å", tuple(passport.keys()), tuple(passport.values()))
    db.insert_query("–Ω–∞–ª–æ–≥–æ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫", tuple(person.keys()), tuple(person.values()))


def make_inspection():
    return {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–Ω—Å–ø–µ–∫—Ü–∏–∏": "–ò–Ω—Å–ø–µ–∫—Ü–∏—è" + str(datetime.now().day) + str(datetime.now().microsecond)
    }


def add_inspection(db: Database):
    inspection = make_inspection()
    db.insert_query("–∏–Ω—Å–ø–µ–∫—Ü–∏–∏", tuple(inspection.keys()), tuple(inspection.values()))


def add_declaration(db: Database):
    index = choice(db.select_query("–∏–Ω—Å–ø–µ–∫—Ü–∏–∏", columns="id_–∏–Ω—Å–ø–µ–∫—Ü–∏–∏"))
    passport = choice(db.select_query("–¥–æ–∫—É–º–µ–Ω—Ç_—É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π_–ª–∏—á–Ω–æ—Å—Ç—å", columns="–Ω–æ–º–µ—Ä_–¥–æ–∫—É–º–µ–Ω—Ç–∞"))
    declaration = make_taxes_declaration(passport, index)

    db.insert_query("–Ω–∞–ª–æ–≥–æ–≤–∞—è_–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è", tuple(declaration.keys()), tuple(declaration.values()))


def main():
    db = Database(os.getenv("DATABASE_PASSWORD"))
    # add_person_with_passport(db)


if __name__ == "__main__":
    load_dotenv()
    # main()
    db = Database(os.getenv("DATABASE_PASSWORD"))

